package ru.avbugorov.interviews1.lesson1.car;

public class Car {
//    Задание №2
//    В этом задании нет требования написать код, поэтому
//    просто пишу как бы я проектировал автомобиль.
//    Надеюсь на обратную связь и объяснение моих ошибок.
//
//1.	Поскольку задача реализована через наследование от абстрактного
// класса, в класс Car надо добавить только характеристики присущие
// всем автомобилям. В данной реализации  private String color,
// private String name, private IEngine engine,
// private Idoor door….. Так же добавляем доступные потомкам сеттеры
// для их установки. Методы должны быть абстрактными т.к. автомобиля
// без этих качественных характеристик не существует.
//2.	Следуя принципу единой ответственности, при добавлении двигателя
// используем абстракцию. Cсоздаем интерфейс IEngine.
//    Так как в данной реализации нет других агрегатов предназначенных
//    для движения, абстрагируемся и считаем поведенческие характеристики
//    (start(),stop(),move()) присущими именно двигателю. Благодаря этому
//    будет легко поменять двигатель у любой модели.
//3.	Догадываясь, что у автомобиля довольно много составных частей
// можно создать CarBuilder для возможности сборки любого автомобиля.
// Классы составных частей наследуют интерфейсы для удобства их замены.
// Например можно создать класс DoorImpl имплементирующий интерфейс IDoor,
// в котором определена поведенческая характеристика методом  open(),
// так как в зависимости от типа двери могут существовать его разные
// реализации(открыть ключём, открыть кнопкой, и т.д.).

}
